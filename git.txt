  //本地上传到远处
   1.配置Git
     （1） 首先在本地创建ssh key；
    $ ssh-keygen -t rsa -C "your_email@youremail.com"
 后面的your_email@youremail.com改为你的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。
	//添加远程连接
  （2）$ git remote add origin git@github.com:yourName/yourRepo.git
  
2.上传到github：
   $ git push origin master 
   git push命令会将本地仓库推送到远程服务器。



git init 建立仓库


git add readme.txt

在仓库目录下、子目录也可以 把文件添加进仓库  把文件放入暂存区


git commit -m "test"  //文件提交到仓库 -m 提交说明  （把暂存区的内容提交到当前分支）

git status //查看更改过的文件


git diff //查看更改文件的内容


git log // 查看历史提交

git log --pretty=oneline //只看提交说明


git reset --hard HEAD^ //^代表回退一个^^回退两个版本 HEAD~100 100个

git reset --hard 3628164  （‘3628164’ 版本号） //回退到指定版本  版本号没必要写全，前几位就可以了，Git会自动去找
'

git -reflog  //记录使用的指令及版本号 （恢复文件）



提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区



//1.进入暂存区之前的恢复 add之前  没有--，就变成了“切换到另一个分支”的命令
git checkout -- file  

//2.进入暂存区之后的恢复 add之后 把文件恢复至工作区 在用checkout 在工作区恢复
git reset HEAD file
//3.进入暂存区（版本库）后的恢复 commit 可以版本回退


--删除

1.rm file  //删除工作区文件 如果确定删除 就git rm (此时能用git checkout -- file 恢复)git commit（提交后就只能回退到指定版本了）  如果误删git checkout -- file 

git rm xxx是删除工作区和暂存区的文件，commit后才会删除版本库的文件

git rm  的作用和add作用是等同的 放入暂存区


-- 分支

git branch dev // 创建分支

git checkcout dev //切换分支

git checkout -b dev //创建并切换分支 

aaaaaaaa
git merge dev //合并dev分支到当前分支下


git branch -d dev //删除分支


!!!分支冲突
原分支在创建分支后 原分支更改了代码 先分支也进行了修改 及不能合并 产生合并冲突 

git status 可以告诉我们产生冲突的文件

直接查看冲突文件即可看见代码差异

git log --graph --pretty=oneline --abbrev-commit 用带参数的git log也可以看到分支的合并情况：

修改原文件后 再次合并即可

--分支管理策略 //合并分支时 默认会用Fast forward（快速）模式 删除分支后会丢掉分支信息 --no-ff禁用它 产生一个新的commit从分支历史上可以看出分支信息 看出来曾经合并过
git merge --no-ff -m "merge with no-ff" dev 
 

--bug分支

如果遇到正在开发的时候来了一个bug需要处理
git stash 可以储藏工作现场 让其他的文件可以提交
git status 查看 就是干净的

创建一个bug分支 完成操作后

git stash list 查看隐藏的工作区

//del
第一种方法：git stash apply 在删除 git stash drop
第二种方法：git stath pop 直接删除

可以多次stash 
恢复指定的stash


Bug分支

阅读: 349106

--------------------------------------------------------------------------------

软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。

当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：

$ git status
# On branch dev
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       new file:   hello.py
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   readme.txt
#

并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？

幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：

$ git stash
Saved working directory and index state WIP on dev: 6224937 add merge
HEAD is now at 6224937 add merge

现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。

首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：

$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 6 commits.
$ git checkout -b issue-101
Switched to a new branch 'issue-101'

现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：

$ git add readme.txt 
$ git commit -m "fix bug 101"
[issue-101 cc17032] fix bug 101
 1 file changed, 1 insertion(+), 1 deletion(-)

修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：

$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 2 commits.
$ git merge --no-ff -m "merged bug fix 101" issue-101
Merge made by the 'recursive' strategy.
 readme.txt |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git branch -d issue-101
Deleted branch issue-101 (was cc17032).

太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！

$ git checkout dev
Switched to branch 'dev'
$ git status
# On branch dev
nothing to commit (working directory clean)

工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：

$ git stash list
stash@{0}: WIP on dev: 6224937 add merge

工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了：

$ git stash pop
# On branch dev
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       new file:   hello.py
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   readme.txt
#
Dropped refs/stash@{0} (f624f8e5f082f2df2bed8a4e09c12fd2943bdd40)

再用git stash list查看，就看不到任何stash内容了：

$ git stash list

你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：

$ git stash apply stash@{0}


